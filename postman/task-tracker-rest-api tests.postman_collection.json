{
	"info": {
		"_postman_id": "b0c24a64-871f-48b6-b1a7-152169527a5f",
		"name": "task-tracker-rest-api tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8538440",
		"_collection_link": "https://lunar-zodiac-29241.postman.co/workspace/e120cf25-e574-4bed-b04f-1a0991ec43b6/collection/8538440-b0c24a64-871f-48b6-b1a7-152169527a5f?action=share&source=collection_link&creator=8538440"
	},
	"item": [
		{
			"name": "/users, /auth",
			"item": [
				{
					"name": "/users (register) -> 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Token cookie is set\", function () {\r",
									"    var cookies = pm.cookies.toObject();\r",
									"    pm.expect(cookies).to.have.property('token');\r",
									"    pm.expect(cookies.token).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"user1Email@email.com\",\r\n    \"password\": \"123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users (register) -> 409 (user exists))",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains 'message' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains correct description\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include('exists');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"user1Email@email.com\",\r\n    \"password\": \"123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users (register) -> 400 (no password))",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains 'message' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains right description\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include('password');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"user1Email@email.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users (register) -> 400 (no email))",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains 'message' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains right description\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include('email');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users_ (register) -> 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Token cookie is set\", function () {\r",
									"    var cookies = pm.cookies.toObject();\r",
									"    pm.expect(cookies).to.have.property('token');\r",
									"    pm.expect(cookies.token).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "user2Email@email.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users_ (register) -> 409 (user exists))",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains 'message' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains correct description\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include('exists');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "user2Email@email.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users_ (register) -> 400 (no password))",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains 'message' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains right description\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include('password');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "user2Email@email.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users_ (register) -> 400 (no email))",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains 'message' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains right description\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include('email');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "user2Email@email.com",
									"type": "text",
									"disabled": true
								},
								{
									"key": "password",
									"value": "12345",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/me -> 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains email field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains right email field value (email of the current user)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.email).to.eq('user2Email@email.com');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/users/me",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "/auth/login_ -> 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Token cookie is set\", function () {\r",
									"    var cookies = pm.cookies.toObject();\r",
									"    pm.expect(cookies).to.have.property('token');\r",
									"    pm.expect(cookies.token).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "user1Email@email.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/auth/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "/auth/login -> 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Token cookie is set\", function () {\r",
									"    var cookies = pm.cookies.toObject();\r",
									"    pm.expect(cookies).to.have.property('token');\r",
									"    pm.expect(cookies.token).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"user1Email@email.com\",\r\n    \"password\": 123\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/auth/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "/auth/login -> 403 (wrong email)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"wrongEmail@email.com\",\r\n    \"password\": \"123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/auth/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "/auth/login -> 403 (wrong password)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"user1Email@email.com\",\r\n    \"password\": \"wrongPassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/auth/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "/auth/login -> 400 (email is absent)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains 'message' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body explain problem correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include('password');\r",
									"    pm.expect(jsonData.message).to.include('email');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": 123\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/auth/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "/auth/login -> 400 (password is absent)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains 'message' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body explain problem correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include('password');\r",
									"    pm.expect(jsonData.message).to.include('email');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"user1Email@email.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/auth/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "/auth/logout -> 204",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/auth/logout",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/me -> 403 (not authenticated)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// doesn't work in newman\r",
									"\r",
									"// const jar = pm.cookies.jar();\r",
									"\r",
									"// jar.clear(pm.request.url);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/users/me",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/tasks",
			"item": [
				{
					"name": "/auth/login -> 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Token cookie is set\", function () {\r",
									"    var cookies = pm.cookies.toObject();\r",
									"    pm.expect(cookies).to.have.property('token');\r",
									"    pm.expect(cookies.token).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"user1Email@email.com\",\r\n    \"password\": 123\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/auth/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tasks -> 201",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"title\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"description\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"completed\": {\r",
									"            \"type\": \"boolean\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"id\", \"title\", \"description\", \"completed\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Validate JSON Schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate specific JSON values\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.title).to.eql(pm.variables.get(\"title1\"));\r",
									"    pm.expect(jsonData.description).to.eql(pm.variables.get(\"description1\"));\r",
									"    pm.expect(jsonData.completed).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"currentTaskId\", pm.response.json().id);\r",
									"console.log(pm.response.json().id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{title1}}\",\r\n    \"description\": \"{{description1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/tasks",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tasks -> 201 (no description)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"title\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"description\": {\r",
									"            \"type\": \"null\"\r",
									"        },\r",
									"        \"completed\": {\r",
									"            \"type\": \"boolean\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"id\", \"title\", \"description\", \"completed\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Validate JSON Schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate specific JSON values\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.title).to.eql(pm.variables.get(\"title2\"));\r",
									"    pm.expect(jsonData.description).to.be.null;\r",
									"    pm.expect(jsonData.completed).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{title2}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/tasks",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tasks -> 400 (no title)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains 'message' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains correct description\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include('title');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/tasks",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tasks -> 202",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"title\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"description\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"completed\": {\r",
									"            \"type\": \"boolean\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"id\", \"title\", \"description\", \"completed\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Validate JSON Schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate specific JSON values\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"currentTaskId\"));\r",
									"    pm.expect(jsonData.title).to.eql(pm.variables.get(\"title1Updated\"));\r",
									"    pm.expect(jsonData.description).to.eql(pm.variables.get(\"description1Updated\"));\r",
									"    pm.expect(jsonData.completed).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{currentTaskId}},\r\n    \"title\": \"{{title1Updated}}\",\r\n    \"description\": \"{{description1Updated}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/tasks",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tasks -> 400 (no id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"message\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"message\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Validate JSON Schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate specific JSON values\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"id\");\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{title1Updated}}\",\r\n    \"description\": \"{{description1Updated}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/tasks",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tasks -> 202 (no title)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"title\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"description\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"completed\": {\r",
									"            \"type\": \"boolean\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"id\", \"title\", \"description\", \"completed\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Validate JSON Schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate specific JSON values\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.title).to.eql(pm.variables.get(\"title1Updated\"));\r",
									"    pm.expect(jsonData.description).to.eql(pm.variables.get(\"description1\"));\r",
									"    pm.expect(jsonData.completed).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{currentTaskId}},\r\n    \"description\": \"{{description1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/tasks",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tasks -> 202 (set completedDate)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"title\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"description\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"completed\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"completedDate\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"id\", \"title\", \"description\", \"completed\", \"completedDate\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Validate JSON Schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate specific JSON values\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.title).to.eql(pm.variables.get(\"title1Updated\"));\r",
									"    pm.expect(jsonData.description).to.eql(pm.variables.get(\"description1\"));\r",
									"    pm.expect(jsonData.completed).to.eql(true);\r",
									"    pm.expect(jsonData.completedDate).to.eql(pm.collectionVariables.get(\"currentDateTime\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var currentDate = new Date();\r",
									"var formattedDate = currentDate.toISOString();\r",
									"pm.collectionVariables.set(\"currentDateTime\", formattedDate);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{currentTaskId}},\r\n    \"description\": \"{{description1}}\",\r\n    \"completedDate\": \"{{currentDateTime}}\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/tasks",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tasks -> 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"First element has correct fields\", function () {\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0]).to.have.property('title');\r",
									"    pm.expect(jsonData[0]).to.have.property('description');\r",
									"    pm.expect(jsonData[0]).to.have.property('completed');\r",
									"});\r",
									"\r",
									"pm.test(\"First element has correct values\", function () {\r",
									"    pm.expect(jsonData[0].title).to.eql(pm.collectionVariables.get('title2'));\r",
									"    pm.expect(jsonData[0].description).to.be.null;\r",
									"    pm.expect(jsonData[0].completed).to.be.false;\r",
									"});\r",
									"\r",
									"pm.test(\"Second element has correct fields\", function () {\r",
									"    pm.expect(jsonData[1]).to.have.property('id');\r",
									"    pm.expect(jsonData[1]).to.have.property('title');\r",
									"    pm.expect(jsonData[1]).to.have.property('description');\r",
									"    pm.expect(jsonData[1]).to.have.property('completed');\r",
									"    pm.expect(jsonData[1]).to.have.property('completedDate');\r",
									"});\r",
									"\r",
									"pm.test(\"First element has correct values\", function () {\r",
									"    pm.expect(jsonData[1].title).to.eql(pm.collectionVariables.get(\"title1Updated\"));\r",
									"    pm.expect(jsonData[1].description).to.eql(pm.collectionVariables.get('description1'));\r",
									"    pm.expect(jsonData[1].completed).to.be.true;\r",
									"    pm.expect(jsonData[1].completedDate).to.eql(pm.collectionVariables.get('currentDateTime'));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/tasks -> 200",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"tasks -> 200"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tasks/{id} -> 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"title\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"description\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"completed\": {\r",
									"            \"type\": \"boolean\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"id\", \"title\", \"description\", \"completed\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Validate JSON Schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate specific JSON values\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.title).to.eql(pm.variables.get(\"title1Updated\"));\r",
									"    pm.expect(jsonData.description).to.eql(pm.variables.get(\"description1\"));\r",
									"    pm.expect(jsonData.completed).to.be.true\r",
									"    pm.expect(jsonData.completedDate).to.eql(pm.variables.get(\"currentDateTime\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/tasks/{{currentTaskId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"tasks",
								"{{currentTaskId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tasks/{wrongId} -> 204",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"title\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"description\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"completed\": {\r",
									"            \"type\": \"boolean\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"id\", \"title\", \"description\", \"completed\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Validate JSON Schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate specific JSON values\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.title).to.eql(pm.variables.get(\"title1Updated\"));\r",
									"    pm.expect(jsonData.description).to.eql(pm.variables.get(\"description1\"));\r",
									"    pm.expect(jsonData.completed).to.be.true\r",
									"    pm.expect(jsonData.completedDate).to.eql(pm.variables.get(\"currentDateTime\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/tasks/{{wrongId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"tasks",
								"{{wrongId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tasks/{id} -> 204",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/tasks/1",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"tasks",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tasks/{wrongId} -> 204 Copy",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/tasks/1",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"tasks",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tasks",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 6,\r\n    \"completed\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/tasks",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "title1",
			"value": "Title1",
			"type": "string"
		},
		{
			"key": "description1Updated",
			"value": "Description1Updated",
			"type": "string"
		},
		{
			"key": "description1",
			"value": "Description1",
			"type": "string"
		},
		{
			"key": "title1Updated",
			"value": "Title1Updated",
			"type": "string"
		},
		{
			"key": "title2",
			"value": "Title2",
			"type": "default"
		},
		{
			"key": "currentTaskId",
			"value": ""
		},
		{
			"key": "currentDateTime",
			"value": ""
		},
		{
			"key": "wrongId",
			"value": "",
			"type": "default"
		}
	]
}