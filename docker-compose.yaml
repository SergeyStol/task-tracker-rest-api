services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    entrypoint: /bin/bash -c "export SPRING_DATASOURCE_PASSWORD=$(cat /run/secrets/db-password) && java org.springframework.boot.loader.launch.JarLauncher"
    ports:
      - "8080:8080"
    environment:
      - spring.datasource.url=jdbc:postgresql://postgres:5432/tasktrackerrestapi?createDatabaseIfNotExist=true
      - spring.datasource.username=postgres
      - spring.rabbitmq.host=rabbitmq
      - spring.rabbitmq.password=guest
      - spring.rabbitmq.username=guest
    healthcheck:
      test: [ "CMD", "curl", "-f", "localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    secrets:
      - db-password
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    profiles:
      - app
  postgres:
    image: postgres:17.0
    restart: "no"
    ports:
      - "5432:5432"
    secrets:
      - db-password
    volumes:
      - type: volume
        source: postgres_data
        target: "/var/lib/postgresql/data"
      - ./db/cleandb.sql:/scripts/cleandb.sql
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/db-password
      POSTGRES_DB: tasktrackerrestapi
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5
    profiles:
      - infra
      - app
  rabbitmq:
    image: rabbitmq:4.0.2-management
    restart: "no"
    ports:
      - "5433:5432"
      - "15672:15672"
      - "5671:5671"
      - "5672:5672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q status
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5
    profiles:
      - infra
      - app
  prometheus:
    image: prom/prometheus:v2.55.0
    restart: "no"
    command:
      - "--web.enable-lifecycle"
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5
    profiles:
      - infra
  grafana:
    image: grafana/grafana:11.3.0
    restart: "no"
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_DISABLE_LOGIN_FORM: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Admin"
    healthcheck:
      test: curl --fail -s http://localhost:3000/api/health || exit 1
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5
    profiles:
      - infra
  newman:
    image: postman/newman
    volumes:
      - type: bind
        source: ./postman
        target: /etc/newman
    entrypoint: [
      "newman",
      "run",
      "task-tracker-rest-api tests.postman_collection.json",
      "-e",
      "http-host.docker.internal-8080.postman_environment.json"
    ]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      app:
        condition: service_healthy
    profiles:
      - test
      - app
volumes:
  postgres_data:
  pgadmin_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:

secrets:
  db-password:
    file: db/password.txt